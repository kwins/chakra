syntax="proto3";
package proto.peer;

import "types.proto";

message MeetMessageRequest{
    string ip = 1;
    int32 port = 2;
    bool client = 3; // ture is client meet ,false is peer meet
}

message MeetMessageResponse{
    types.Error error = 1;
}

message MetaDB{
    string name = 1;
    bool memory = 2;
    int32 shard = 3;
    int32 shard_size = 4;
    int32 cached = 5;
    int32 flag = 6;
}

message PeerState{
    int32 epoch = 1;
    int32 flag = 2;
    string ip = 3;
    int32 port = 4;
    string name = 5;
    repeated MetaDB dbs = 6;
}

message ClusterState{ // 节点视角看到的集群状态
    int32 current_epoch = 1;
    repeated PeerState peers = 2;
    int32 state = 3;
}

message GossipSender{
    int32 current_epoch = 1;
    int32 config_epoch = 2;
    // sender name
    string name = 3;
    string data = 4;
    repeated MetaDB meta_dbs = 5;
    string ip = 6;
    int32 port = 7;
    int32 state = 8;
}

message GossipPeer{
    string peer_name = 1;
    int32 config_epoch = 2;
    int64 last_ping_send = 3;
    int64 last_pong_recved = 4;
    string ip = 5;
    int32 port = 6;
    int32 flag = 7;
    repeated MetaDB meta_dbs = 8;
}

message GossipMessage{
    GossipSender sender = 1;
    repeated GossipPeer peers = 2;
}

message FailMessage{
    GossipSender sender = 1;
    string fail_peer_name = 2;
}

enum DBAction {
    ADD = 0;
    DEL = 1;
}

message DBMessage{
    GossipSender sender = 1;
    string name = 2; // peer name
    DBAction action = 3; // add, del
    MetaDB info = 4; // add 的时候使用
}

message EpochSetMessageRequest{
    int64 epoch = 1;
}

message EpochSetMessageResponse{
    types.Error error = 1;
}

message DBSetMessageRequest{
    repeated MetaDB dbs = 1;
}

message DBSetMessageResponse{
    types.Error error = 1;
}

message StateMessageRequest{
    string from = 1; // name
}

message StateMessageResponse{
    types.Error error = 1;
    ClusterState state = 2;
}

message DBState{
    repeated MetaDB dbs = 1;
}